'''
Created on Aug 26, 2014

@author: jordan_weizmann
'''
import math
import nltk
import logging
import argparse
import os
import re
import collections
from matplotlib import pyplot 

def calc_precision(n,translation, reference):
    total = 0
    correct = 0
    for i in range(min(len(translation),len(reference))):
        tra_ngrams = nltk.ngrams(translation[i].split(), n)
        ref_ngrams = nltk.ngrams(reference[i].split(), n)
        total += min(len(ref_ngrams),len(tra_ngrams))
        for ng in tra_ngrams:
            if(ng in ref_ngrams):
                correct += 1
    print("total:" + str(total)+ ", correct: "+ str(correct))
    if(total == 0):
        return(0)
    precision = float(correct)/total
    return(precision)

def calc_brev(translation, reference):
    tra_len = 0
    ref_len = 0
    for i in range(min(len(translation),len(reference))):
        tra_len += len(translation[i].split())
        ref_len += len(reference[i].split())
    return(min(1,math.exp(1-float(ref_len)/tra_len)))
    
def calc_bleu(translation, reference):
    bleu = {}
    for n in range(1,5):
        bleu[n] = calc_precision(n,translation, reference)
        if(bleu[n] == 0):
            return 0
    brevity_penalty = calc_brev(translation, reference)
    score = brevity_penalty * \
            math.exp((math.log( bleu[1] ) + \
                      math.log( bleu[2] ) + \
                      math.log( bleu[3] ) + \
                      math.log( bleu[4] ) ) / 4) ;
    return((score,brevity_penalty,bleu[1],bleu[2],bleu[3],bleu[4]))

def get_args():
    parser = argparse.ArgumentParser(description='bleu calculator.')
    parser.add_argument('-ref','--reference', type=argparse.FileType('r+'), default='test set/text.eng',
                       help='translation reference file')
    parser.add_argument('-t','--translation', nargs='*',
                       help='file or folder of files of translations generated by the stack decoder')
    parser.add_argument('-log','--log_level', default='debug', help='log level')
    return(parser.parse_args())


def add_handler(filename,logname,numeric_level):
        file_handler = logging.FileHandler(filename+'.'+logname, 'w')
        file_handler.setLevel(numeric_level)
#         formatter = logging.Formatter("%(asctime)s %(filename)s, %(lineno)d, %(funcName)s: %(message)s")
#         file_handler.setFormatter(formatter)
        logger = logging.getLogger(logname)
        logger.setLevel(numeric_level)
        logger.addHandler(file_handler)
        return logger

def remove_handler(logger):
        logger.handlers[0].stream.close()
        logger.removeHandler(logger.handlers[0])


if __name__ == '__main__':

    args = get_args()
    rf = args.reference
    references = rf.readlines()
#     tf = args.translation
#     translations = tf.readlines()        

    numeric_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args.log_level)

    name_pattern = "^translation.(\d+).(\d+)((?:.h)?(?:.s)?)$"
    scores = {}

    if args.translation:
        folder = ''
        files = args.translation
    else:
        folder = 'translations/'
        files = sorted(os.listdir(folder))
    for fn in files:
        if fn.endswith(".bleu"):
            continue     

        tf = open(folder+fn,'r+')
        translations = tf.readlines()        

        logger = add_handler(folder+fn, 'bleu', numeric_level)
        
        for i in range(min(len(translations),len(references))):
            logger.info(str(i)+': '+str(calc_bleu([translations[i]], [references[i]])))
        result = calc_bleu(translations, references)
        logger.info(result)
        rf.close()
        
        print(fn)
        q = re.match(name_pattern,fn)
        (k,j,i) = q.groups()
        if i not in scores:
            scores[i] = {}
        if int(j) not in scores[i]:
            scores[i][int(j)] = {}
        scores[i][int(j)][float(k)/10] = result[0]
            
    
        remove_handler(logger)
        
    scores_dict={}
    pyplot.figure(1)
    scores_dict[1] = collections.OrderedDict(sorted(scores[''][1].items()))
    scores_dict[2] = collections.OrderedDict(sorted(scores[''][2].items()))
    scores_dict[3] = collections.OrderedDict(sorted(scores[''][3].items()))
    pyplot.title('')
    pyplot.xlabel('lambda_phi')
    pyplot.ylabel('bleu score')
    a, = pyplot.plot(scores_dict[1].keys(),scores_dict[1].values(),'b',label='500')
    b, = pyplot.plot(scores_dict[2].keys(),scores_dict[2].values(),'r',label='1000')
    c, = pyplot.plot(scores_dict[3].keys(),scores_dict[3].values(),'g',label='1500')
    pyplot.legend(handles=[a,b,c])
    pyplot.figure(2)
    scores_dict[1] = collections.OrderedDict(sorted(scores['.h'][1].items()))
    scores_dict[2] = collections.OrderedDict(sorted(scores['.h'][2].items()))
    scores_dict[3] = collections.OrderedDict(sorted(scores['.h'][3].items()))
    pyplot.title('with heuristic function')
    pyplot.xlabel('lambda_phi')
    pyplot.ylabel('bleu score')
    a, = pyplot.plot(scores_dict[1].keys(),scores_dict[1].values(),'b',label='500')
    b, = pyplot.plot(scores_dict[2].keys(),scores_dict[2].values(),'r',label='1000')
    c, = pyplot.plot(scores_dict[3].keys(),scores_dict[3].values(),'g',label='1500')
    pyplot.legend(handles=[a,b,c])
    pyplot.figure(3)
    scores_dict[1] = collections.OrderedDict(sorted(scores['.h.s'][1].items()))
    scores_dict[2] = collections.OrderedDict(sorted(scores['.h.s'][2].items()))
    scores_dict[3] = collections.OrderedDict(sorted(scores['.h.s'][3].items()))
    pyplot.title('with heuristic function and and smaller n-gram language model')
    pyplot.xlabel('lambda_phi')
    pyplot.ylabel('bleu score')
    a, = pyplot.plot(scores_dict[1].keys(),scores_dict[1].values(),'b',label='500')
    b, = pyplot.plot(scores_dict[2].keys(),scores_dict[2].values(),'r',label='1000')
    c, = pyplot.plot(scores_dict[3].keys(),scores_dict[3].values(),'g',label='1500')
    pyplot.legend(handles=[a,b,c])
    pyplot.figure(4)
    scores_dict[1] = collections.OrderedDict(sorted(scores['.s'][1].items()))
    scores_dict[2] = collections.OrderedDict(sorted(scores['.s'][2].items()))
    scores_dict[3] = collections.OrderedDict(sorted(scores['.s'][3].items()))
    pyplot.title('with smaller n-gram language model')
    pyplot.xlabel('lambda_phi')
    pyplot.ylabel('bleu score')
    a, = pyplot.plot(scores_dict[1].keys(),scores_dict[1].values(),'b',label='500')
    b, = pyplot.plot(scores_dict[2].keys(),scores_dict[2].values(),'r',label='1000')
    c, = pyplot.plot(scores_dict[3].keys(),scores_dict[3].values(),'g',label='1500')
    pyplot.legend(handles=[a,b,c])
    pyplot.show()
